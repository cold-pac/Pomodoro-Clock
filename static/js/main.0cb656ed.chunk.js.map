{"version":3,"sources":["index.js"],"names":["timerInterval","bloatConvert","num","toString","length","Control","props","className","id","elementId","onClick","contents","App","state","remainingTime","breakLength","sessionLength","timerLabel","oppositeState","pomodoroNum","toggleTimer","bind","decreaseBreak","increaseBreak","decreaseSession","increaseSession","resetTime","setInterval","setState","window","Tone","Transport","start","stopTransport","console","log","clearInterval","this","startTimer","stopTimer","updateTimer","timerStyle","color","map","elem","i","key","style","Math","floor","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0cb656ed.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//Remember you're supposed to split the application into modules \n//TODO: refractor everything out as components. \n\nfunction bloatConvert (num) {\n    if (num.toString().length === 1) {\n        return 0 + num.toString();\n    }\n    return num; \n}\n\nlet timerInterval;\n\nconst Control = (props) => {\n    return <div className = 'control' id = {props.elementId} onClick = {props.onClick}>{props.contents}</div>\n}\n\nclass App extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            remainingTime: (25*60),  //measuring all times in seconds \n            breakLength: (5*60),\n            sessionLength: (25*60), \n            timerLabel: \"Session\",\n            state: \"Stopped\",\n            oppositeState: \"Start\",\n            pomodoroNum: [],\n        }\n        this.toggleTimer = this.toggleTimer.bind(this);\n        this.decreaseBreak = this.decreaseBreak.bind(this);\n        this.increaseBreak = this.increaseBreak.bind(this);\n        this.decreaseSession = this.decreaseSession.bind(this);\n        this.increaseSession = this.increaseSession.bind(this);\n        this.resetTime = this.resetTime.bind(this);\n    }\n    startTimer () {\n        timerInterval = setInterval(() => {\n            this.setState(function(state, props){\n                return {remainingTime: (state.remainingTime - 1)}\n            });\n            if (this.state.remainingTime < 0)  {\n                window.Tone.Transport.start(); window.stopTransport();\n                if (this.state.timerLabel === \"Session\") {\n                    if (this.state.pomodoroNum.length < 4) {\n                        this.setState(function(state,props) {\n                            return {remainingTime: state.breakLength, timerLabel: \"Break\", pomodoroNum: [...state.pomodoroNum, state.pomodoroNum.length], }\n                        });\n                    } else {\n                        this.setState({\n                            timerLabel: \"Elongated Break\", \n                            remainingTime: (20*60), \n                            pomodoroNum: [], \n                        });\n                    }              \n                } else {\n                    this.setState(function(state,props) {\n                        return {remainingTime: state.sessionLength, timerLabel: \"Session\"}\n                    });\n                }\n                console.log(this.state.pomodoroNum);\n            }\n        }, 1000);\n    }\n    stopTimer () {\n        clearInterval(timerInterval);\n        timerInterval = false;\n    }\n    toggleTimer () {\n        if (this.state.state === \"Stopped\") {\n            this.startTimer();\n            this.setState({\n                state: \"Started\",\n                oppositeState: \"Stop\"\n            });\n        } else {\n            this.stopTimer();\n            this.setState({\n                state: \"Stopped\",\n                oppositeState: \"Start\"\n            });\n        }\n    }\n    decreaseBreak () {\n        if (!timerInterval) {\n            this.setState(function(state, props) {\n                if (state.breakLength > (1*60)) {\n                    return {breakLength: state.breakLength - 60}\n                }\n            });\n            this.updateTimer();\n        }\n    }\n    increaseBreak () {\n        if (!timerInterval) {\n            this.setState(function(state, props) {\n                if (state.breakLength < (60*60)) {\n                    return {breakLength: state.breakLength + 60}\n                }\n            });\n            this.updateTimer();\n        }\n    }\n    updateTimer () { //don't have to bind to 'this' because it's not being used in an event handler \n        if (this.state.timerLabel === \"Session\") {\n            this.setState(function(state, props) {\n                return {remainingTime: state.sessionLength}\n            });\n        } else { \n            this.setState(function(state, props) {\n                return {remainingTime: state.breakLength}\n            });\n        }\n    }\n    decreaseSession () {\n        if (!timerInterval) {\n            this.setState(function(state, props) {\n                if (state.sessionLength > (1*60)) {\n                    return {sessionLength: state.sessionLength - 60}\n                }\n            });\n            this.updateTimer();\n        }\n    }\n    increaseSession () {\n        if (!timerInterval) {\n            this.setState(function(state, props) {\n                if (state.sessionLength < (60*60)) {\n                    return {sessionLength: state.sessionLength + 60}\n                }\n            });\n            this.updateTimer();\n        }\n    }\n    resetTime () {\n        this.setState({\n                remainingTime: (25*60),\n                breakLength: (5*60),\n                sessionLength: (25*60), \n                timerLabel: \"Session\",\n                state: \"Stopped\",\n                oppositeState: \"Start\"\n        });\n        this.stopTimer();\n    }\n    render () {\n        let timerStyle = {\n            color: '#A0A0FF',\n        }\n        this.state.remainingTime <= 10? timerStyle.color = 'red' : timerStyle.color = '#A0A0FF';\n        return (\n            <div id = \"container\">\n                <h1><span>****</span><span>Pomodoro Clock</span><span>****</span></h1>\n                <div id = \"pomodoros\">{this.state.pomodoroNum.map((elem, i) => (<span key = {i}>+</span>))}</div>\n                <div id = \"options\">\n                    <div id = \"break\">\n                        <div id = \"break-label\">Break Length:</div>\n                        <div className = \"info\" id = \"breakinfo\">\n                            <Control elementId = \"break-decrement\" onClick = {this.decreaseBreak} contents = \"-\" /> \n                            <div id = \"break-length\">{this.state.breakLength/60}</div>\n                            <Control elementId = \"break-increment\" onClick = {this.increaseBreak} contents = \"+\"/> \n                        </div>\n                    </div>\n                    <div id = \"session\">\n                        <div id = \"session-label\">Session Length:</div>\n                        <div className = \"info\" id = \"sessioninfo\">\n                            <Control elementId = \"session-decrement\" onClick = {this.decreaseSession} contents = \"-\"/> \n                            <div id = \"session-length\">{this.state.sessionLength/60}</div>\n                            <Control elementId = \"session-increment\" onClick = {this.increaseSession} contents = \"+\"/> \n                        </div>\n                    </div>\n                </div>\n                <div id = \"timerContainer\">\n                    <div id = \"timer-label\" style = {timerStyle}>{this.state.timerLabel}</div>\n                    <div id = \"time-left\" style = {timerStyle}>\n                        {bloatConvert(Math.floor(this.state.remainingTime/(60))) + ':' + bloatConvert(this.state.remainingTime%60)}\n                    </div>\n                    <div id = \"buttons\">\n                        <Control elementId = \"start_stop\" onClick = {this.toggleTimer} contents = {this.state.oppositeState}/> \n                        <Control elementId = \"reset\" onClick = {this.resetTime} contents = \"Reset\" /> \n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}