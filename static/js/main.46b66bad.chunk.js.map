{"version":3,"sources":["index.js"],"names":["timerInterval","bloatConvert","num","toString","length","Control","props","className","id","elementId","onClick","contents","App","state","remainingTime","breakLength","sessionLength","timerLabel","oppositeState","toggleTimer","bind","decreaseBreak","increaseBreak","decreaseSession","increaseSession","resetTime","setInterval","setState","window","Tone","Transport","start","stopTransport","clearInterval","this","startTimer","stopTimer","updateTimer","timerStyle","color","style","Math","floor","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46b66bad.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//Remember you're supposed to split the application into modules \n//TODO: refractor everything out as components. \n\nfunction bloatConvert (num) {\n    if (num.toString().length === 1) {\n        return 0 + num.toString();\n    }\n    return num; \n}\n\nlet timerInterval;\n\nconst Control = (props) => {\n    return <div className = 'control' id = {props.elementId} onClick = {props.onClick}>{props.contents}</div>\n}\n\nclass App extends React.Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            remainingTime: (25*60),  //measuring all times in seconds \n            breakLength: (5*60),\n            sessionLength: (25*60), \n            timerLabel: \"Session\",\n            state: \"Stopped\",\n            oppositeState: \"Start\"\n        }\n        this.toggleTimer = this.toggleTimer.bind(this);\n        this.decreaseBreak = this.decreaseBreak.bind(this);\n        this.increaseBreak = this.increaseBreak.bind(this);\n        this.decreaseSession = this.decreaseSession.bind(this);\n        this.increaseSession = this.increaseSession.bind(this);\n        this.resetTime = this.resetTime.bind(this);\n    }\n    startTimer () {\n        timerInterval = setInterval(() => {\n            this.setState(function(state, props){\n                return {remainingTime: (state.remainingTime - 1)}\n            });\n            if (this.state.remainingTime === 0)  {\n                window.Tone.Transport.start(); window.stopTransport();\n                if (this.state.timerLabel === \"Session\") {\n                    this.setState(function(state,props) {\n                        return {remainingTime: state.breakLength, timerLabel: \"Break\"}\n                    });\n                } else {\n                    this.setState(function(state,props) {\n                        return {remainingTime: state.sessionLength, timerLabel: \"Session\"}\n                    });\n                }\n            }\n        }, 1000);\n    }\n    stopTimer () {\n        clearInterval(timerInterval);\n        timerInterval = false;\n    }\n    toggleTimer () {\n        if (this.state.state === \"Stopped\") {\n            this.startTimer();\n            this.setState({\n                state: \"Started\",\n                oppositeState: \"Stop\"\n            });\n        } else {\n            this.stopTimer();\n            this.setState({\n                state: \"Stopped\",\n                oppositeState: \"Start\"\n            });\n        }\n    }\n    decreaseBreak () {\n        if (!timerInterval) {\n            this.setState(function(state, props) {\n                if (state.breakLength > (1*60)) {\n                    return {breakLength: state.breakLength - 60}\n                }\n            });\n        }\n    }\n    increaseBreak () {\n        if (!timerInterval) {\n            this.setState(function(state, props) {\n                if (state.breakLength < (60*60)) {\n                    return {breakLength: state.breakLength + 60}\n                }\n            });\n        }\n    }\n    updateTimer () { //don't have to bind to 'this' because it's not being used in an event handler \n        this.setState(function(state, props) {\n            return {remainingTime: state.sessionLength}\n        });\n    }\n    decreaseSession () {\n        if (!timerInterval) {\n            this.setState(function(state, props) {\n                if (state.sessionLength > (1*60)) {\n                    return {sessionLength: state.sessionLength - 60}\n                }\n            });\n            this.updateTimer();\n        }\n    }\n    increaseSession () {\n        if (!timerInterval) {\n            this.setState(function(state, props) {\n                if (state.sessionLength < (60*60)) {\n                    return {sessionLength: state.sessionLength + 60}\n                }\n            });\n            this.updateTimer();\n        }\n    }\n    resetTime () {\n        this.setState({\n                remainingTime: (25*60),\n                breakLength: (5*60),\n                sessionLength: (25*60), \n                timerLabel: \"Session\",\n                state: \"Stopped\",\n                oppositeState: \"Start\"\n        });\n        this.stopTimer();\n    }\n    render () {\n        let timerStyle = {\n            color: '#A0A0FF',\n        }\n        this.state.remainingTime <= 10? timerStyle.color = 'red' : timerStyle.color = '#A0A0FF';\n        return (\n            <div id = \"container\">\n                <h1><span>****</span><span>Pomodoro Clock</span><span>****</span></h1>\n                <div id = \"options\">\n                    <div id = \"break\">\n                        <div id = \"break-label\">Break Length:</div>\n                        <div className = \"info\" id = \"breakinfo\">\n                            <Control elementId = \"break-decrement\" onClick = {this.decreaseBreak} contents = \"-\" /> \n                            <div id = \"break-length\">{this.state.breakLength/60}</div>\n                            <Control elementId = \"break-increment\" onClick = {this.increaseBreak} contents = \"+\"/> \n                        </div>\n                    </div>\n                    <div id = \"session\">\n                        <div id = \"session-label\">Session Length:</div>\n                        <div className = \"info\" id = \"sessioninfo\">\n                            <Control elementId = \"session-decrement\" onClick = {this.decreaseSession} contents = \"-\"/> \n                            <div id = \"session-length\">{this.state.sessionLength/60}</div>\n                            <Control elementId = \"session-increment\" onClick = {this.increaseSession} contents = \"+\"/> \n                        </div>\n                    </div>\n                </div>\n                <div id = \"timerContainer\">\n                    <div id = \"timer-label\" style = {timerStyle}>{this.state.timerLabel}</div>\n                    <div id = \"time-left\" style = {timerStyle}>\n                        {bloatConvert(Math.floor(this.state.remainingTime/(60))) + ':' + bloatConvert(this.state.remainingTime%60)}\n                    </div>\n                    <div id = \"buttons\">\n                        <Control elementId = \"start_stop\" onClick = {this.toggleTimer} contents = {this.state.oppositeState}/> \n                        <Control elementId = \"reset\" onClick = {this.resetTime} contents = \"Reset\" /> \n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}